# Ansible playbook that uses appliance_console_cli, plus existing
# Ansible modules, to provision a freshly deployed CloudForms appliance.
#

# this play performs initial sysadmin for newly created CFME appliances
# we set a non-default root password, install a public key for ansible,
# subscribe to the Red Hat customer portal, and update packages.


- hosts: cfui
  vars:
    ansible_ssh_pass: "{{ cfme_new_root_pw }}"

  tasks:

    - name: configure zones
      block:
      - name: add server to zone 
        shell: >
          /var/www/miq/vmdb/tools/change_server_zone.rb
          {{ item.key }} 
          {{ item.value }} 
        with_dict: "{{ cf_servers_zones }}"

- hosts: all
  vars:
    ansible_ssh_pass: "{{ cfme_new_root_pw }}"

  tasks:

    - name: Set cf ap roles
      block:

      - name : rails runner
        shell: >
          rails r 'puts MiqServer.my_server.set_config(:server => {:role => "
          {{ cf_servers_roles[ansible_hostname] }}
          "})'
        args:
          chdir: /var/www/miq/vmdb

      - debug:
          msg: "{{ansible_hostname}} {{ cf_servers_roles[ansible_hostname] }}"

      - name: restart evmserverd
        service:
          name: evmserverd
          state: restarted


- hosts: localhost
  vars:
    ansible_ssh_pass: "{{ cfme_new_root_pw }}"

  tasks:

    - name: get oc auth
      uri:
        url: "{{ ose_uri }}/oauth/authorize?response_type=token&client_id=openshift-challenging-client"
        method: GET
        user: cfuser
        password: "{{ vault_ose_default_cfuser_pw }}"
        force_basic_auth: yes
        validate_certs: no
        body: yes
        body_format: json
        return_content: yes
        follow_redirects: all

      register: rest_bearer

    - name: set fact for oc tokenid
      vars:
        fragment: "{{ rest_bearer.url | urlsplit('fragment') }}"
        bearer: "{{ fragment.split('&')[0].split('=')[1] }}"
      set_fact:
        bearer: bearer

    - name: oc operations
      block:
        - name: get oc token id
          uri:
            url: "{{ ose_uri }}/api/v1/namespaces/management-infra/serviceaccounts/management-admin"
            method: GET
            body_format: json
            validate_certs: no
            headers:
              Authorization: "Bearer {{ bearer }}"
          register: rest_tokenid

        - name: get oc token for token id
          vars:
            tokenid: "{{ rest_tokenid.json.secrets[0].name  }}"
          uri:
            url: "{{ ose_uri }}/api/v1/namespaces/management-infra/secrets/{{ tokenid }}"
            method: GET
            body_format: json
            validate_certs: no
            headers:
              Authorization: "Bearer {{ bearer }}"
          register: rest_result

        - debug:
            msg: "{{ rest_result  }}"


    - name: install miq module
      pip:
        name: git+https://github.com/ManageIQ/manageiq-api-client-python.git

    - name: Create Openshift  provider in ManageIQ
      manageiq_provider:
        name: 'Openshift_Provider'
        type: 'Openshift'
        provider:
          auth_key: "{{ rest_result.json.data.token  }}"
          hostname: 'ose.example.com'
          port: 8443
          verify_ssl: False
        metrics:
          role: 'hawkular'
          hostname: 'ose.example.com'
          port: 443
          verify_ssl: False
        manageiq_connection:
          url: 'http://cfui.example.com:3000'
          username: 'admin'
          password: "{{ cfme_new_root_pw  }}"
          verify_ssl: False






